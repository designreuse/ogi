DROP TABLE IF EXISTS TA_EVENT;
CREATE TABLE TA_EVENT (
	EVT_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	PRO_ID INT,
	EVT_TYPE VARCHAR(32) NOT NULL,
	EVT_TIMESTAMP TIMESTAMP NOT NULL
);


DELIMITER $$
DROP TRIGGER IF EXISTS TRG_ADDRESS_01$$
CREATE TRIGGER TRG_ADDRESS_01 
BEFORE UPDATE ON TA_ADDRESS FOR EACH ROW
BEGIN
	DECLARE event_id INTEGER;
	DECLARE property_id INTEGER;

	-- Handle only first prp
	SELECT PRO_ID into property_id FROM TA_PROPERTY WHERE ADD_ID=NEW.ADD_ID LIMIT 0,1;
	
	IF property_id IS NOT NULL THEN
		SELECT EVT_ID into event_id FROM TA_EVENT WHERE EVT_TYPE='PRP_UPD' AND PRO_ID = property_id;
	
		-- If event doesn't exist nothing todo. This mean TA_PROPERTY is not inserted
		IF event_id IS NOT NULL THEN
			UPDATE TA_EVENT SET EVT_TIMESTAMP=NOW() WHERE EVT_ID=event_id;
		ELSE
			INSERT INTO TA_EVENT(PRO_ID, EVT_TYPE, EVT_TIMESTAMP) VALUES (property_id, 'PRP_UPD', NOW());
		END IF;

	END IF;
END
$$

-- TA_PROPERTY
DROP TRIGGER IF EXISTS TRG_PROPERTY_01$$
CREATE TRIGGER TRG_PROPERTY_01 
BEFORE UPDATE ON TA_PROPERTY FOR EACH ROW
BEGIN
	DECLARE event_id INTEGER;
	DECLARE property_id INTEGER DEFAULT NEW.PRO_ID;
	
	SELECT EVT_ID into event_id FROM TA_EVENT WHERE EVT_TYPE='PRP_UPDATE' AND PRO_ID = property_id;

	IF event_id IS NOT NULL THEN
		UPDATE TA_EVENT SET EVT_TIMESTAMP=NOW() WHERE EVT_ID=event_id;
	ELSE
		INSERT INTO TA_EVENT(PRO_ID, EVT_TYPE, EVT_TIMESTAMP) VALUES (property_id, 'PRP_UPDATE', NOW());
	END IF;

END
$$

DROP TRIGGER IF EXISTS TA_PROPERTY_02$$
CREATE TRIGGER TA_PROPERTY_02 
BEFORE DELETE ON TA_PROPERTY FOR EACH ROW
BEGIN
	DECLARE event_id INTEGER;
	DECLARE property_id INTEGER DEFAULT OLD.PRO_ID;
	
	SELECT EVT_ID into event_id FROM TA_EVENT WHERE EVT_TYPE='PRP_DELETE' AND PRO_ID = property_id;

	IF event_id IS NOT NULL THEN
		UPDATE TA_EVENT SET EVT_TIMESTAMP=NOW() WHERE EVT_ID=event_id;
	ELSE
		DELETE FROM TA_EVENT WHERE PRO_ID=property_id;
		INSERT INTO TA_EVENT(PRO_ID, EVT_TYPE, EVT_TIMESTAMP) VALUES (property_id, 'PRP_DELETE', NOW());
	END IF;

END
$$

-- TA_PROPERTY_BUILT
DROP TRIGGER IF EXISTS TA_PROPERTY_BUILT_01$$
CREATE TRIGGER TA_PROPERTY_BUILT_01 
BEFORE UPDATE ON TA_PROPERTY_BUILT FOR EACH ROW
BEGIN
	DECLARE event_id INTEGER;
	DECLARE property_id INTEGER DEFAULT NEW.PRO_ID;
	
	SELECT EVT_ID into event_id FROM TA_EVENT WHERE EVT_TYPE='PRP_UPDATE' AND PRO_ID = property_id;

	IF event_id IS NOT NULL THEN
		UPDATE TA_EVENT SET EVT_TIMESTAMP=NOW() WHERE EVT_ID=event_id;
	ELSE
		INSERT INTO TA_EVENT(PRO_ID, EVT_TYPE, EVT_TIMESTAMP) VALUES (property_id, 'PRP_UPDATE', NOW());
	END IF;

END
$$


-- TA_PROPERTY_LIVABLE
DROP TRIGGER IF EXISTS TA_PROPERTY_LIVABLE_01$$
CREATE TRIGGER TA_PROPERTY_LIVABLE_01 
BEFORE UPDATE ON TA_PROPERTY_LIVABLE FOR EACH ROW
BEGIN
	DECLARE event_id INTEGER;
	DECLARE property_id INTEGER DEFAULT NEW.PRO_ID;
	
	SELECT EVT_ID into event_id FROM TA_EVENT WHERE EVT_TYPE='PRP_UPDATE' AND PRO_ID = property_id;

	IF event_id IS NOT NULL THEN
		UPDATE TA_EVENT SET EVT_TIMESTAMP=NOW() WHERE EVT_ID=event_id;
	ELSE
		INSERT INTO TA_EVENT(PRO_ID, EVT_TYPE, EVT_TIMESTAMP) VALUES (property_id, 'PRP_UPDATE', NOW());
	END IF;

END
$$


-- TA_PROPERTY_PLOT
DROP TRIGGER IF EXISTS TA_PROPERTY_PLOT_01$$
CREATE TRIGGER TA_PROPERTY_PLOT_01 
BEFORE UPDATE ON TA_PROPERTY_PLOT FOR EACH ROW
BEGIN
	DECLARE event_id INTEGER;
	DECLARE property_id INTEGER DEFAULT NEW.PRO_ID;
	
	SELECT EVT_ID into event_id FROM TA_EVENT WHERE EVT_TYPE='PRP_UPDATE' AND PRO_ID = property_id;

	IF event_id IS NOT NULL THEN
		UPDATE TA_EVENT SET EVT_TIMESTAMP=NOW() WHERE EVT_ID=event_id;
	ELSE
		INSERT INTO TA_EVENT(PRO_ID, EVT_TYPE, EVT_TIMESTAMP) VALUES (property_id, 'PRP_UPDATE', NOW());
	END IF;

END
$$


-- TA_DESCRIPTION
DROP TRIGGER IF EXISTS TRG_DESCRIPTION_01$$
CREATE TRIGGER TRG_DESCRIPTION_01 
BEFORE UPDATE ON TA_DESCRIPTION FOR EACH ROW
BEGIN
	DECLARE event_id INTEGER;
	DECLARE property_id INTEGER DEFAULT NEW.PRO_ID;
	
	SELECT EVT_ID into event_id FROM TA_EVENT WHERE EVT_TYPE='PRP_UPDATE' AND PRO_ID = property_id;

	IF event_id IS NOT NULL THEN
		UPDATE TA_EVENT SET EVT_TIMESTAMP=NOW() WHERE EVT_ID=event_id;
	ELSE
		INSERT INTO TA_EVENT(PRO_ID, EVT_TYPE, EVT_TIMESTAMP) VALUES (property_id, 'PRP_UPDATE', NOW());
	END IF;

END
$$

DROP TRIGGER IF EXISTS TRG_DESCRIPTION_02$$
CREATE TRIGGER TRG_DESCRIPTION_02 
BEFORE DELETE ON TA_DESCRIPTION FOR EACH ROW
BEGIN
	DECLARE event_id INTEGER;
	DECLARE property_id INTEGER DEFAULT OLD.PRO_ID;
	
	SELECT EVT_ID into event_id FROM TA_EVENT WHERE EVT_TYPE='PRP_UPDATE' AND PRO_ID = property_id;

	IF event_id IS NOT NULL THEN
		UPDATE TA_EVENT SET EVT_TIMESTAMP=NOW() WHERE EVT_ID=event_id;
	ELSE
		INSERT INTO TA_EVENT(PRO_ID, EVT_TYPE, EVT_TIMESTAMP) VALUES (property_id, 'PRP_UPDATE', NOW());
	END IF;

END
$$

-- TA_DOCUMENT
DROP TRIGGER IF EXISTS TRG_DOCUMENT_01$$
CREATE TRIGGER TRG_DOCUMENT_01 
BEFORE UPDATE ON TA_DOCUMENT FOR EACH ROW
BEGIN
	DECLARE event_id INTEGER;
	DECLARE property_id INTEGER;
	
	-- Handle only one property
	SELECT tj.PRO_ID INTO property_id FROM TA_DOCUMENT d
	JOIN TJ_PRP_DOC tj ON tj.DOC_ID=d.DOC_ID
	WHERE d.DOC_ID=NEW.DOC_ID LIMIT 0,1;

	IF property_id IS NOT NULL THEN
		SELECT EVT_ID into event_id FROM TA_EVENT WHERE EVT_TYPE='PRP_UPDATE' AND PRO_ID = property_id;

		IF event_id IS NOT NULL THEN
			UPDATE TA_EVENT SET EVT_TIMESTAMP=NOW() WHERE EVT_ID=event_id;
		ELSE
			INSERT INTO TA_EVENT(PRO_ID, EVT_TYPE, EVT_TIMESTAMP) VALUES (property_id, 'PRP_UPDATE', NOW());
		END IF;
	END IF;
END
$$

DROP TRIGGER IF EXISTS TRG_DESCRIPTION_02$$
CREATE TRIGGER TRG_DESCRIPTION_02 
BEFORE DELETE ON TA_DOCUMENT FOR EACH ROW
BEGIN
	DECLARE event_id INTEGER;
	DECLARE property_id INTEGER;
	
	-- Handle only one property
	SELECT tj.PRO_ID INTO property_id FROM TA_DOCUMENT d
	JOIN TJ_PRP_DOC tj ON tj.DOC_ID=d.DOC_ID
	WHERE d.DOC_ID=OLD.DOC_ID LIMIT 0,1;
	
	IF property_id IS NOT NULL THEN
		SELECT EVT_ID into event_id FROM TA_EVENT WHERE EVT_TYPE='PRP_UPDATE' AND PRO_ID = property_id;
	
		IF event_id IS NOT NULL THEN
			UPDATE TA_EVENT SET EVT_TIMESTAMP=NOW() WHERE EVT_ID=event_id;
		ELSE
			INSERT INTO TA_EVENT(PRO_ID, EVT_TYPE, EVT_TIMESTAMP) VALUES (property_id, 'PRP_UPDATE', NOW());
		END IF;
	END IF;

END
$$